name: deploy-security

on:
  push:
    branches:
      - main
    paths:
      - "security/**"
  pull_request:
    branches:
      - main
    paths:
      - "security/**"
  workflow_dispatch:

env:
  # AssumeRoleされるロールのARN
  IAM_ROLE: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/github-actions-open-id-connect-role
  AWS_REGION: ap-northeast-1
  TF_VAR_slack_channel_id: ${{ secrets.TF_VAR_SLACK_CHANNEL_ID }}
  TF_VAR_slack_workspace_id: ${{ secrets.TF_VAR_SLACK_WORKSPACE_ID }}

permissions:
  id-token: write

jobs:
  security_check:
    if: ${{ !contains(github.event.head_commit.message, '[skip security]') }}
    runs-on: ubuntu-22.04
    permissions:
      contents: read # for actions/checkout to fetch code
      security-events: write # for github/codeql-action/upload-sarif to upload SARIF results
      actions: read # only required for a private repository by github/codeql-action/upload-sarif to get the Action run status
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner in fs mode
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: "config"
          hide-progress: false
          format: "sarif"
          output: "trivy-results.sarif"
          exit-code: "1"
          ignore-unfixed: true
          severity: "CRITICAL,HIGH"

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: "trivy-results.sarif"

  code_review:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
      pull-requests: write
    if: github.event_name == 'pull_request'
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ env.IAM_ROLE }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Terraform Format
        id: fmt
        run: terraform fmt -check

      - name: Terraform Init
        run: terraform init
        working-directory: security/envs/dev

      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color
        working-directory: security/envs/dev

      - name: Terraform Plan
        id: plan
        run: terraform plan -no-color
        working-directory: security/envs/dev

      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1
        working-directory: security/envs/dev

      - name: Require pull request reviews
        uses: actions/github-script@v6
        env:
          PLAN_OUTPUT: ${{ steps.plan.outputs.stdout }}
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `terraform plan:\n\`\`\`\n${process.env.PLAN_OUTPUT}\n\`\`\``;
            const pr = await github.rest.pulls.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.issue.number
            });
            if (pr.data.mergeable && pr.data.mergeable_state === 'clean' && pr.data.reviewDecision === 'approved') {
              console.log("Pull request is approved and ready to merge");
            } else {
              core.setFailed("Pull request requires approval before merging");
            }

  deploy:
    #needs: code_review
    needs: security_check
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ env.IAM_ROLE }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Terraform Init
        id: init
        run: terraform init
        working-directory: security/envs/dev

      - name: Terraform Apply
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: |
          terraform apply -auto-approve -input=false
        working-directory: security/envs/dev

      #- name: Import GPG key
      #  run: |
      #    echo "${{ secrets.GPG_PRIVATE_KEY }}" | gpg --import

      #- name: Sign the Terraform state
      #  if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      #  run: |
      #    # Sign the terraform.tfstate file
      #    gpg --batch --yes --armor --detach-sign --output terraform.tfstate.sig --local-user your-signing-key-id terraform.tfstate

      #- name: Upload Terraform state and signature
      #  if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      #  uses: actions/upload-artifact@v2
      #  with:
      #    name: terraform-state
      #    path: |
      #      terraform.tfstate
      #      terraform.tfstate.sig
