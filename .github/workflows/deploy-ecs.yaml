name: deploy-ecs

on:
  push:
    branches:
      - main
    paths:
      - "next-docker/**"
      - "with-docker-compose-app/**"
  workflow_dispatch:

env:
  # AssumeRoleされるロールのARN
  IAM_ROLE: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/github-actions-open-id-connect-role
  AWS_REGION: ap-northeast-1
  ECR_REGISTRY: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.ap-northeast-1.amazonaws.com
  ECR_REPOSITORY: nextjs-github
  ECS_CLUSTER: nextjs-github
  ECS_SERVICE: nextjs-github-service
  CONTAINER_NAME: nextjs-github
  IMAGE_TAG: ${{ github.sha }}
  IMAGE_NAME: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.ap-northeast-1.amazonaws.com/nextjs-github:${{ github.sha }}

jobs:
  deploy:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ env.IAM_ROLE }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Configure AWS CLI for Fargate
        run: |
          aws configure set default.ecs_launch_type FARGATE

      # Parameter Store Tag更新
      - name: Update SSM Parameter with image tag
        run: |
          aws ssm put-parameter --name "/nextjs-github/image_tag" --type "String" --value "${{ env.IMAGE_TAG }}" --overwrite

      # ECR Image 更新
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./with-docker-compose-app
          push: true
          tags: ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}

      # TASK Definition
      #- name: Get current task definition
      #  run: |
      #    aws ecs describe-task-definition --task-definition nextjs-github-task-definition --query 'taskDefinition' --output json > task-definition.json

      #- name: Create new task definition
      #  run: |
      #    export IMAGE_NAME=${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}
      #    envsubst < task-definition.json > new-task-definition.json

      #- name: Register new task definition
      #  run: |
      #    NEW_TASK_DEF_ARN=$(aws ecs register-task-definition --family nextjs-github-task-definition --container-definitions "$(cat new-task-definition.json)" | jq -r '.taskDefinition.taskDefinitionArn')
      #    echo "NEW_TASK_DEF_ARN=$NEW_TASK_DEF_ARN" >> $GITHUB_ENV

      - name: Get & Register task definition
        run: |
          aws ecs describe-task-definition --task-definition nextjs-github-task-definition | \
          jq '.taskDefinition | del (.taskDefinitionArn, .revision, .status, .requiresAttributes, .compatibilities, .registeredAt, .registeredBy)' > task-definition.json
          export IMAGE_NAME=${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}
          jq --arg image_name "$IMAGE_NAME" '.containerDefinitions[0].image = $image_name' task-definition.json > new-task-definition.json
          NEW_TASK_DEF_ARN=$(aws ecs register-task-definition --cli-input-json file://new-task-definition.json | jq -r '.taskDefinition.taskDefinitionArn')
          echo "NEW_TASK_DEF_ARN=$NEW_TASK_DEF_ARN" >> $GITHUB_ENV

      # ECS
      #- name: Get latest task definition
      #  run: |
      #    LATEST_TASK_DEFINITION_ARN=$(aws ecs describe-task-definition --task-definition nextjs-github-task-definition --query 'taskDefinition.taskDefinitionArn' --output text)
      #    echo "LATEST_TASK_DEFINITION_ARN=$LATEST_TASK_DEFINITION_ARN" >> $GITHUB_ENV

      - name: Update ECS Service
        run: |
          aws ecs update-service --cluster ${{ env.ECS_CLUSTER }} --service ${{ env.ECS_SERVICE }} --desired-count 1 --task-definition $NEW_TASK_DEF_ARN
